services:
  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/__pycache__
    environment:
      - ENVIRONMENT=development
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - rabbitmq
    networks:
      - app-network
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - /app/__pycache__
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - rabbitmq
    networks:
      - app-network
    restart: unless-stopped
    command: celery -A app.celery_app worker --loglevel=info

  # Celery Beat Scheduler
  beat:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - /app/__pycache__
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - rabbitmq
    networks:
      - app-network
    restart: unless-stopped
    command: celery -A app.celery_app beat --loglevel=info

  # Celery Flower (Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - rabbitmq
    networks:
      - app-network
    restart: unless-stopped
    command: celery -A app.celery_app flower --port=5555

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped

  # Redis (Celery Result Backend)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # RabbitMQ (Message Broker)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5673:5672"  # Changed host port to avoid conflict with Docker Desktop
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    restart: unless-stopped

  # Nginx (Reverse Proxy - Optional for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge
